{"version":3,"sources":["mobileSwiper.js"],"names":["breakpoint","window","matchMedia","mySwiper","firstSlider","breakpointChecker","matches","undefined","destroy","firstslider","Swiper","loop","slidesPerView","keyboardControl","grabCursor","addListener","mySwiper12","secondSlider","Secondslider","spaceBetween","breakpoints","mySwiper13","thirdsecondSlider","Thirdslider","JsZWHeroListSlider01","JsZWHeroListSlider","JSZWslider","JsZWLeadershipListSlider01","JsZWLeadershipListSlider","JSZWLeaderShipslider","manufactureTabslider","manufactureslider"],"mappings":"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","file":"mobileSwiper.js","sourcesContent":["(function () {\n  \"use strict\";\n  // breakpoint where swiper will be destroyed\n  // and switches to a dual-column layout\n  var breakpoint = window.matchMedia(\"(min-width:31.25em)\");\n  // keep track of swiper instances to destroy later\n  var mySwiper;\n  var firstSlider = mySwiper;\n\n  var breakpointChecker = function () {\n    // if larger viewport and multi-row layout needed\n    if (breakpoint.matches === true) {\n      // clean up old instances and inline styles when available\n      if (firstSlider !== undefined) firstSlider.destroy(true, true);\n      // or/and do nothing\n      return;\n      // else if a small viewport and single column layout needed\n    } else if (breakpoint.matches === false) {\n      // fire small viewport version of swiper\n      return firstslider();\n    }\n  };\n\n  var firstslider = function () {\n    firstSlider = new Swiper(\".js-howit-Works\", {\n      loop: false,\n      slidesPerView: 1.2,\n      // a11y: true,\n      keyboardControl: true,\n      grabCursor: true,\n    });\n  };\n\n  // keep an eye on viewport size changes\n  breakpoint.addListener(breakpointChecker);\n  // kickstart\n  breakpointChecker();\n})(); /* IIFE end */\n\n(function () {\n  \"use strict\";\n  // breakpoint where swiper will be destroyed\n  // and switches to a dual-column layout\n  var breakpoint = window.matchMedia(\"(min-width: 992px)\");\n  // keep track of swiper instances to destroy later\n  var mySwiper12;\n  var secondSlider = mySwiper12;\n\n  var breakpointChecker = function () {\n    // if larger viewport and multi-row layout needed\n    if (breakpoint.matches === true) {\n      // clean up old instances and inline styles when available\n      if (secondSlider !== undefined) secondSlider.destroy(true, true);\n      // or/and do nothing\n      return;\n      // else if a small viewport and single column layout needed\n    } else if (breakpoint.matches === false) {\n      // fire small viewport version of swiper\n      return Secondslider();\n    }\n  };\n\n  var Secondslider = function () {\n    secondSlider = new Swiper(\".js-ourNumbers\", {\n      loop: false,\n      slidesPerView: 1.2,\n      spaceBetween: 15,\n      // a11y: true,\n      keyboardControl: true,\n      grabCursor: true,\n      breakpoints: {\n        320: {\n          slidesPerView: 1.2,\n        },\n        769: {\n          slidesPerView: 2.2,\n        },\n      },\n    });\n  };\n\n  // keep an eye on viewport size changes\n  breakpoint.addListener(breakpointChecker);\n  // kickstart\n  breakpointChecker();\n})(); /* IIFE end */\n\n(function () {\n  \"use strict\";\n  // breakpoint where swiper will be destroyed\n  // and switches to a dual-column layout\n  var breakpoint = window.matchMedia(\"(min-width:31.25em)\");\n  // keep track of swiper instances to destroy later\n  var mySwiper13;\n  var thirdsecondSlider = mySwiper13;\n\n  var breakpointChecker = function () {\n    // if larger viewport and multi-row layout needed\n    if (breakpoint.matches === true) {\n      // clean up old instances and inline styles when available\n      if (thirdsecondSlider !== undefined)\n        thirdsecondSlider.destroy(true, true);\n      // or/and do nothing\n      return;\n      // else if a small viewport and single column layout needed\n    } else if (breakpoint.matches === false) {\n      // fire small viewport version of swiper\n      return Thirdslider();\n    }\n  };\n\n  var Thirdslider = function () {\n    thirdsecondSlider = new Swiper(\".js-manufacturing\", {\n      loop: false,\n      slidesPerView: 1.2,\n      // a11y: true,\n      keyboardControl: true,\n      grabCursor: true,\n    });\n  };\n\n  // keep an eye on viewport size changes\n  breakpoint.addListener(breakpointChecker);\n  // kickstart\n  breakpointChecker();\n})(); /* IIFE end */\n\n// .js-zw-hero-list //\n(function () {\n  \"use strict\";\n  // breakpoint where swiper will be destroyed\n  // and switches to a dual-column layout\n  var breakpoint = window.matchMedia(\"(min-width:1279px)\");\n  // keep track of swiper instances to destroy later\n  var JsZWHeroListSlider01;\n  var JsZWHeroListSlider = JsZWHeroListSlider01;\n\n  var breakpointChecker = function () {\n    // if larger viewport and multi-row layout needed\n    if (breakpoint.matches === true) {\n      // clean up old instances and inline styles when available\n      if (JsZWHeroListSlider !== undefined)\n        JsZWHeroListSlider.destroy(true, true);\n      // or/and do nothing\n      return;\n      // else if a small viewport and single column layout needed\n    } else if (breakpoint.matches === false) {\n      // fire small viewport version of swiper\n      return JSZWslider();\n    }\n  };\n\n  var JSZWslider = function () {\n    JsZWHeroListSlider = new Swiper(\".js-zw-hero-list\", {\n      loop: false,\n      slidesPerView: 1,\n      // spaceBetween: 30,\n      // a11y: true,\n      keyboardControl: true,\n      grabCursor: true,\n      breakpoints: {\n        320: {\n          slidesPerView: 1,\n        },\n        560: {\n          slidesPerView: 2,\n        },\n        768: {\n          slidesPerView: 2,\n        },\n        1024: {\n          slidesPerView: 4,\n          spaceBetween: 0,\n        },\n      },\n    });\n  };\n\n  // keep an eye on viewport size changes\n  breakpoint.addListener(breakpointChecker);\n  // kickstart\n  breakpointChecker();\n})(); /* IIFE end */\n// .js-zw-hero-list //\n\n// .js-zw-Leadership-list //\n(function () {\n  \"use strict\";\n  // breakpoint where swiper will be destroyed\n  // and switches to a dual-column layout\n  var breakpoint = window.matchMedia(\"(min-width:1279px)\");\n  // keep track of swiper instances to destroy later\n  var JsZWLeadershipListSlider01;\n  var JsZWLeadershipListSlider = JsZWLeadershipListSlider01;\n\n  var breakpointChecker = function () {\n    // if larger viewport and multi-row layout needed\n    if (breakpoint.matches === true) {\n      // clean up old instances and inline styles when available\n      if (JsZWLeadershipListSlider !== undefined)\n        JsZWLeadershipListSlider.destroy(true, true);\n      // or/and do nothing\n      return;\n      // else if a small viewport and single column layout needed\n    } else if (breakpoint.matches === false) {\n      // fire small viewport version of swiper\n      return JSZWLeaderShipslider();\n    }\n  };\n\n  var JSZWLeaderShipslider = function () {\n    JsZWLeadershipListSlider = new Swiper(\".js-zw-leadership-list\", {\n      loop: false,\n      slidesPerView: 1,\n      spaceBetween: 0,\n      // a11y: true,\n      keyboardControl: true,\n      grabCursor: true,\n      breakpoints: {\n        320: {\n          slidesPerView: 1.2,\n        },\n        560: {\n          slidesPerView: 2.4,\n        },\n        768: {\n          slidesPerView: 2.4,\n        },\n        1024: {\n          slidesPerView: 3.1,\n        },\n      },\n    });\n  };\n\n  // keep an eye on viewport size changes\n  breakpoint.addListener(breakpointChecker);\n  // kickstart\n  breakpointChecker();\n})(); /* IIFE end */\n// .js-zw-leadership-list //\n\n// manufacturing expertise listing\n\n// Only Mobile tabs converted to slider\n\n(function () {\n  \"use strict\";\n  // breakpoint where swiper will be destroyed\n  // and switches to a dual-column layout\n  var breakpoint = window.matchMedia(\"(min-width:31.25em)\");\n  // keep track of swiper instances to destroy later\n  var mySwiper;\n  var manufactureTabslider = mySwiper;\n\n  var breakpointChecker = function () {\n    // if larger viewport and multi-row layout needed\n    if (breakpoint.matches === true) {\n      // clean up old instances and inline styles when available\n      if (manufactureTabslider !== undefined)\n        manufactureTabslider.destroy(true, true);\n      // or/and do nothing\n      return;\n      // else if a small viewport and single column layout needed\n    } else if (breakpoint.matches === false) {\n      // fire small viewport version of swiper\n      return manufactureslider();\n    }\n  };\n\n  var manufactureslider = function () {\n    manufactureTabslider = new Swiper(\".js-mobile-TabSlider-manufacturing\", {\n      loop: false,\n      slidesPerView: 1.5,\n      // spaceBetween: 20,\n      // a11y: true,\n      keyboardControl: true,\n      grabCursor: true,\n\n      breakpoints: {\n        360: {\n          slidesPerView: 1.2,\n        },\n      },\n    });\n  };\n\n  // keep an eye on viewport size changes\n  breakpoint.addListener(breakpointChecker);\n  // kickstart\n  breakpointChecker();\n})(); /* IIFE end */\n\n\n//\n\n// Only Mobile tabs converted to slider\n\n(function () {\n  \"use strict\";\n  // breakpoint where swiper will be destroyed\n  // and switches to a dual-column layout\n  var breakpoint = window.matchMedia(\"(min-width:31.25em)\");\n  // keep track of swiper instances to destroy later\n  var mySwiper;\n  var manufactureTabslider = mySwiper;\n\n  var breakpointChecker = function () {\n    // if larger viewport and multi-row layout needed\n    if (breakpoint.matches === true) {\n      // clean up old instances and inline styles when available\n      if (manufactureTabslider !== undefined)\n        manufactureTabslider.destroy(true, true);\n      // or/and do nothing\n      return;\n      // else if a small viewport and single column layout needed\n    } else if (breakpoint.matches === false) {\n      // fire small viewport version of swiper\n      return manufactureslider();\n    }\n  };\n\n  var manufactureslider = function () {\n    manufactureTabslider = new Swiper(\".js-mobile-TabSlider-manufacturing-industries\", {\n      loop: false,\n      slidesPerView: 1.3,\n      // spaceBetween: 20,\n      // a11y: true,\n      keyboardControl: true,\n      grabCursor: true,\n\n      breakpoints: {\n        360: {\n          slidesPerView: 1.3,\n        },\n      },\n    });\n  };\n\n  // keep an eye on viewport size changes\n  breakpoint.addListener(breakpointChecker);\n  // kickstart\n  breakpointChecker();\n})(); /* IIFE end */\n\n// manufacturing expertise listing\n\n\n// resources card slider\n\n(function () {\n  \"use strict\";\n  // breakpoint where swiper will be destroyed\n  // and switches to a dual-column layout\n  var breakpoint = window.matchMedia(\"(min-width:31.25em)\");\n  // keep track of swiper instances to destroy later\n  var mySwiper;\n  var manufactureTabslider = mySwiper;\n\n  var breakpointChecker = function () {\n    // if larger viewport and multi-row layout needed\n    if (breakpoint.matches === true) {\n      // clean up old instances and inline styles when available\n      if (manufactureTabslider !== undefined)\n        manufactureTabslider.destroy(true, true);\n      // or/and do nothing\n      return;\n      // else if a small viewport and single column layout needed\n    } else if (breakpoint.matches === false) {\n      // fire small viewport version of swiper\n      return manufactureslider();\n    }\n  };\n\n  var manufactureslider = function () {\n    manufactureTabslider = new Swiper(\".js-resources-cards\", {\n      loop: false,\n      slidesPerView: 1.2,\n      // spaceBetween: 20,\n      // a11y: true,\n      keyboardControl: true,\n      grabCursor: true,\n\n      breakpoints: {\n        360: {\n          slidesPerView: 1.3,\n        },\n      },\n    });\n  };\n\n  // keep an eye on viewport size changes\n  breakpoint.addListener(breakpointChecker);\n  // kickstart\n  breakpointChecker();\n})(); /* IIFE end */\n\n\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}